image: $CI_REGISTRY/msl/libraries/spherapy:latest

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip

# Apply the rule globally to all jobs/stages
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

before_script:
  - apt-get update
  - apt-get install -y git
  - python --version
  - pip --version
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  - pip install twine build

stages:
  - check
  - test
  - build
  - publish

lint:
  stage: check
  script:
    - ruff check

type:
  stage: check
  script:
    - mypy spherapy --disable-error-code=import-untyped

test:
  stage: test
  image: "python:$VERSION-slim"
  script:
    - pip install --editable .[dev]
    - export SPHERAPY_CONFIG_DIR='.'
    - python -m pytest
  parallel:
    matrix:
      - VERSION: ['3.10','3.11','3.12']

build:
  stage: build
  rules:
    - if: '$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "release-automation"'
      when: always
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "stable"'
      when: always
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.d+$/'
      when: always
  script:
    - git fetch
    - git checkout $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - TAG_ON_BRANCH=$(git tag --points-at HEAD)
    - if [ -z "$TAG_ON_BRANCH" ]; then
        echo "A git tag needs to be created on HEAD for package build and publish.";
        exit 1;
      fi
    - python -m build
  artifacts:
    paths:
      - dist/

publish:
  stage: publish
  rules:
    - when: manual
  script:
    - TWINE_PASSWORD=${TEST_PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --verbose --repository testpypi dist/*