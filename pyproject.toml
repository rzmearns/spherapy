[build-system]
requires = ["setuptools >= 77.0.3",
						 "setuptools_scm >= 8.0"]
build-backend = "setuptools.build_meta"

[project]
name = 'spherapy'
dependencies = [
		"astropy==5.3.4",
		"scipy>=1.8.0",
		"skyfield==1.46",
		"numpy>=1.25.2",
		"progressbar2==4.4.1",
		"hapsira==0.18.0",
		"spacetrack==1.2.0",
		"keyring>=25.0.0",
		"platformdirs==4.3.8",
		"importlib_resources>=6.5.2"
	]

requires-python = ">=3.10"

authors = [
  {name = "Robert Mearns", email = "rz.mearns@gmail.com"}
]

maintainers = [
  {name = "Robert Mearns", email = "rz.mearns@gmail.com"}
]

description = "An orbital propagator wrapper and TLE fetcher"
readme = "README.md"
keywords = ['satellite', 'sgp', 'space', 'orbit']

dynamic = ["version"]

[project.optional-dependencies]
dev = [
	"line-profiler==4.2.0",
	"pytest==8.4.1",
	"pytest-check==2.5.3",
	"mypy==1.17.0",
	"ruff==0.12.4",
	"pre-commit==4.2.0",
	"types-requests>=2.32.4",
	"types-python-dateutil>=2.9.0",
	]

[project.urls]
Documentation = "https://rzmearns.github.io/spherapy/"
Repository = "https://github.com/rzmearns/spherapy"
Issues = "https://github.com/rzmearns/spherapy/issues"

[project.scripts]
spherapy-create-credentials = "spherapy.__main__:create_credentials"
spherapy-clear-credentials = "spherapy.__main__:clear_credentials"

[tool.setuptools.package-data]
"spherapy.data.TLEs" = ["*.tle"]

[tool.setuptools_scm]
version_file = "spherapy/_version.py"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    "__pycache__",
    ".rcache",
    ".venv",
    ".vscode",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "_version.py"
]

line-length = 100
indent-width = 4

output-format = "grouped"

# Ruff version
required-version = ">=0.12"
respect-gitignore = true
show-fixes = true
src = ["spherapy"]
# cache-dir = "~/.cache/ruff"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60

#indent with tabs
indent-style = "tab"

# automatically detect the appropriate line ending.
line-ending = "auto"

# use double quotes for strings.
quote-style = "double"

#ignore magic trailing commas
skip-magic-trailing-comma = true

[tool.ruff.lint]
# list of all errors checked by Ruff https://docs.astral.sh/ruff/rules/
select = ["ANN",	 	# flake8-annotations
			# "ERA",	 	# eradicate (commented out code) (unfortunatlely lots of false positives)
			"S",	 	# flake8-bandit
			"B",	 	# flake8-bugbear
			"A",	 	# flake8-builtins
			"C4",	 	# flake8-comprehensions
			"LOG",	 	# flake8-logging
			"G",	 	# flake8-logging-format
			"PIE",	 	# flake8-pie
			"T20",	 	# flake8-print
			"PT",	 	# flake8-pytest-style
			"RET",	 	# flake8-return
			"SLF",	 	# flake8-self
			"SIM",	 	# flake8-simplify
			"TD",	 	# flake8-todos
			"TC",	 	# flake8-type-checking
			"ARG",	 	# flake8-unused-arguments
			"PTH",	 	# flake8-use-pathlib
			"I",	 	# isort
			"C90",	 	# mccabe
			"NPY",	 	# numpy
			"N", 	 	# pep8-naming
			"PERF",	 	# perflint
			"E", "W", 	# pycodestyle
			# "DOC",	 	# pydoclint
			"D",	 	# pydocstyle
			"F",	 	# pyflakes
			"PL",	 	# pylint
			"UP",	 	# pyupgrade
			"FURB",	 	# refurb
			"RUF",	 	# ruff-specific
			"TRY",	 	# tryceratops
			]

ignore = [
			# "E225", # missing whitespace around operator
			"E266", # too many leading '#' for block comment
			"W191", # indentation contains tabs
			# "W504", # line break after binary operator
			"N802", # function name should be lowercase (mixedCase in this codebase)
			"D206", # docstrings should be indented with spaces (not in this codebase)
			"TRY003", # avoid specifying long messages outside exception class
		 "TD002", # missing author in TODO
		 "TD003", # missing issue link in TODO
		 "PLR0915", # too many statements (max 50)
			]

task-tags = ["TODO"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"**/{tests,docs}/*" = ["I",
												"DOC",
												 "D",
												 "B",
												 "S",
												 "PLR",
												 "E",
												 "SLF",
												 ]

[tool.ruff.lint.flake8-annotations]
# Allow typing.Any as a type annotation
allow-star-arg-any = true
# __init__ doesn't require return type
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports.
banned-from = ["numpy",
				"pandas",
				"datetime",
			]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
# Declare a custom alias for the `vispy` module.
"datetime" = "dt"

[tool.ruff.lint.isort]
force-sort-within-sections=true
# import in all files
required-imports = []
section-order = [
  "future",
  "standard-library",
  "typing",
  "third-party",
  "first-party",
  "local-folder",
  "testing"
]
split-on-trailing-comma = false

known-first-party = ["satplot"]

[tool.ruff.lint.isort.sections]
"testing" = ["pytest","pytest-check"]
"typing" = ["types","typing","typing_extensions"]


[tool.ruff.lint.pydocstyle]
convention="google"
ignore-var-parameters = true

[tool.ruff.lint.pyflakes]
allowed-unused-imports = ["logging", "typing"]